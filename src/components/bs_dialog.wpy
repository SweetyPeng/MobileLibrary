<style lang="less">
@import "../less/mixins.less";

/* 基础样式 */
.bs-dialog--container {
  position: fixed;
  top: 45%;
  left: 50%;
  width: 80%;
  height: 0;
  font-size: 16px;
  overflow: hidden;
  transition: opacity .2s linear;
  border-radius: 4px;
  // background-color: #fff;
  background:rgba(248,248,248,1);
  transform: translate3d(-50%, -50%, 0);
  color: #333;
  opacity: 0;
}

.bs-dialog--mask {
  position: fixed;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  background-color: rgba(0, 0, 0, 0.6);
  transition: .3s;
  display: none;
}

/* 弹出层内容 */
.bs-dialog__header {
  padding: 15px 0 0;
  text-align: center;
}

.bs-dialog__content {
  position: relative;
  padding: 42px 20px;
  line-height: 1.5;
  min-height: 40px;
  .content-warp{
    color: #030303;
    font-size: 26rpx;
    text-align: center;
    :nth-child(1){
      color: #030303;
      font-size: 34rpx;
    }
}
  &::after {
    .other-mixin();
    border-bottom-width: 1px;
  }
}

/* 在有标题时，需要减弱内容的存在感 */
.bs-dialog__content--title {
  color: #999;
  font-size: 14px;
}

.bs-dialog__footer {
  overflow: hidden;
  background:rgba(248,248,248,1);
}

.bs-dialog__button {
  line-height: 86px;
  height: 86px;
  padding: 0 5px;
  border-radius: 0;
  margin-bottom: 0;
  // color:#0076FF;
  // background-color: #ffffff;
  background:rgba(248,248,248,1);
  font-size: 34rpx;
  &::after {
    border-width: 0;
    border-radius: 0;
  }
}

/* 展示时，样式重置 */
.bs-dialog--show .bs-dialog--container {
  opacity: 1;
  height: auto;
  z-index: 1000;
  border-radius:26rpx;
}

.bs-dialog--show .bs-dialog--mask {
  display: block;
  z-index: 900;
}

/* 水平/垂直布局 */
.bs-dialog__footer--horizon {
  background-color: #ffffff;
  display: flex;
}

.bs-dialog__footer--horizon .bs-dialog__button {
  flex: 1;

  &::after {
    border-right-width: 1px;
  }

  &:last-child::after {
    border-right-width: 0;
  }
}


.bs-dialog__footer--vertical .bs-dialog__button {
  flex: 1;

  &::after {
    border-bottom-width: 1px;
  }

  &:last-child::after {
    border-bottom-width: 0;
  }
}

</style>
<template>
    <view class="bs-dialog {{ bsDialog.show ? 'bs-dialog--show' : '' }}">
        <view class="bs-dialog--mask" bindtap="closeMask"></view>
        <view class="bs-dialog--container">
        <view
            wx:if="{{ bsDialog.title }}"
            class="bs-dialog__header">{{ bsDialog.title }}</view>
        <view
            class="bs-dialog__content {{ bsDialog.title ? 'bs-dialog__content--title' : '' }}">
          <slot name="bsDialog_content"></slot>   
        </view>
        <view
            class="bs-dialog__footer {{ bsDialog.buttonsShowVertical ? 'bs-dialog__footer--vertical' : 'bs-dialog__footer--horizon' }}">
            <block wx:for="{{ bsDialog.buttons }}" wx:key="{{ item.text }}-{{ item.type }}">
            <button
                class="bs-dialog__button bs-btn"
                data-type="{{ item.type }}"
                catchtap="handleBsDialogButtonClick"
                style="color: {{ item.color || '#333' }}">{{ item.text }}</button>
            </block>
        </view>
        </view>
    </view>
</template>

<script>
  import wepy from 'wepy';
  export default class bsDialog extends wepy.component {
    components = {
    }

    data = {
      bsDialog: {}
    }

    computed = {
    }

    methods = {
      closeMask(e) {
        this.bsDialog = {show: false};
      },
      test() {
      },
      showBsDialog(options = {}, e) {
        const {
        // 自定义 btn 列表
        // { type: 按钮类型，回调时以此作为区分依据，text: 按钮文案, color: 按钮文字颜色 }
        buttons = [],
        // 标题
        title = '',
        // 内容
        content = ' ',
        // 按钮是否展示为纵向
        buttonsShowVertical = false,
        // 是否展示确定
        showConfirm = true,
        // 确认按钮文案
        confirmText = '确定',
        // 确认按钮颜色
        confirmColor = '#0076FF',
        // 是否展示取消
        showCancel = true,
        // 取消按钮文案
        cancelText = '取消',
        // 取消按钮颜色
        cancelColor = '#0076FF'
      } = options

      // 处理默认按钮的展示
      // 纵向排布确认按钮在上方
        let showCustomBtns = false
        if (buttons.length === 0) {
          if (showConfirm) {
            buttons.push({
              type: 'confirm',
              text: confirmText,
              color: confirmColor
            })
          }

          if (showCancel) {
            const cancelButton = {
              type: 'cancel',
              text: cancelText,
              color: cancelColor
            }
            if (buttonsShowVertical) {
              buttons.push(cancelButton)
            } else {
              buttons.unshift(cancelButton)
            }
          }
        } else {
          showCustomBtns = true
        }

        return new Promise((resolve, reject) => {
          this.bsDialog = {
            show: true,
            showCustomBtns,
            buttons,
            title,
            content,
            buttonsShowVertical,
            showConfirm,
            confirmText,
            confirmColor,
            showCancel,
            cancelText,
            cancelColor,
            // 回调钩子
            resolve,
            reject
          }
          this.$apply();
        })
      },
      handleBsDialogButtonClick(e) {
        const _f = function() {};
        const { currentTarget = {} } = e
        const { dataset = {} } = currentTarget

        // 获取当次弹出框的信息
        const bsDialogData = this.bsDialog || {};
        const { resolve = _f } = bsDialogData;

        // 重置 bsDialog 里的内容
        this.bsDialog = Object.assign(this.bsDialog, { show: false })

        // 自定义按钮，全部 resolve 形式返回，根据 type 区分点击按钮
        if (bsDialogData.showCustomBtns) {
          resolve({
            type: dataset.type
          })
          return;
        }

        // 默认按钮，确认为 resolve，取消为 reject
        // if (dataset.type === 'confirm') {
        //   resolve({
        //     type: 'confirm'
        //   })
        // } else {
        //   reject({
        //     type: 'cancel'
        //   })
        // }
        resolve({
          type: dataset.type
        })
      }
    }

    events = {
    }

    onLoad() {
    }
  }
</script>
